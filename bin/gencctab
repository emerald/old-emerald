#!/usr/bin/env bash
#
# Generate the tables and lists that drive the ccalls mechanism

set -euo pipefail

allfiles=$(\
  cd "${EMERALDROOT}/ccalls" ; \
  emmake doths | egrep -v 'Entering|Leaving')

selectedfiles=$(echo $* | sed -e 's/\.o/\.h/g')

ncctabh=cctab.h
ncctabc=cctab.c

moduleindex=0

cp /dev/null $ncctabh
cp /dev/null $ncctabc

cat << THEEND >> $ncctabh
/*
 * $ncctabh
 *
 * THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT EDIT.
 */

#ifndef _EMERALD_CCALLTAB_H
#define _EMERALD_CCALLTAB_H 1

typedef int (*ccallFunction)(void);

typedef struct CCallDescriptor {
  ccallFunction ccFunction;
  char* ccName;
  char* ccArgTemplate;
} CCallDescriptor;

extern CCallDescriptor *ccalltable[];
THEEND

cat << THEEND >> $ncctabc
/*
 * $ncctabc
 *
 * THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT EDIT.
 */

#define E_NEEDS_STDIO_ONLY
#include "system.h"
#include "assert.h"
#include "$ncctabh"

THEEND

getModulename() {
  echo "${1%.*}" | tr a-z A-Z
}

isSelected() {
  file=$1
  selected=""
  for selectedfile in $selectedfiles
  do
    if [ "$selectedfile" == "$file" ]; then
      selected="1"
    fi
  done
  test "$selected"
}

for file in $allfiles
do
  absfile="$EMERALDROOT/ccalls/$file"
  modulename="$(getModulename "${file}")"

  if isSelected "${file}"; then
    printf "Generating %s\n" $modulename
  else
    printf "Skipping %s\n" $modulename
    continue
  fi

  printf "%s\n" "#define ${modulename} $moduleindex" >> $ncctabh
  printf "%s\n" "CCallDescriptor ${modulename}_table[] = { " >> $ncctabc

  ccss=$(grep '^CCALL' $absfile | sed \
      -e 's/CCALL *( *//' \
      -e 's/,/ /g' \
      -e 's/)//' \
      -e 's/"//g' \
      -e 's/;//' \
      -e 's/\015//')

  functionindex=0
  if [ $(echo "$ccss" | wc -l) -eq 0 ]; then
    printf "%s\n" "  { (ccallFunction) notselected, \"\", \"\" }," >> $ncctabc
  else
    while read css; do
      read -r -a cs <<< "$css"
      functionname=${cs[0]}
      ccallname=${cs[1]}
      ccallstring=${cs[2]}
      if [ $selected ]; then
        printf "%s\n" "extern int $functionname(void);" >> $ncctabh
        printf "%s\n" "  { (ccallFunction) $functionname, \"$ccallname\", \"$ccallstring\" }," >> $ncctabc
      else
        printf "%s\n" "  { (ccallFunction) notselected, \"$ccallname\", \"$ccallstring\" }," >> $ncctabc
      fi
      printf "%s\n" "#define ${ccallname} $functionindex" >> $ncctabh
      functionindex=$((functionindex+1))
    done <<<"$ccss"
  fi
  printf "%s\n" "};" >> $ncctabc
  moduleindex=$((moduleindex+1))
done

printf "%s\n" "CCallDescriptor *ccalltable[] = {" >> $ncctabc
for absfile in $allfiles
do
  file="$(basename $absfile)"
  if isSelected "${file}"; then
  modulename="$(getModulename "${file}")"
    printf "%s\n" "  ${modulename}_table," >> $ncctabc
  else
    printf "%s\n" "  0," >> $ncctabc
  fi
done
printf "%s\n" "#endif" >> $ncctabh
printf "%s\n" "};" >> $ncctabc
